{"version":3,"sources":["components/LandingPage.js","components/About.js","components/Projects.js","components/Resume.js","components/Contact.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","style","width","margin","className","col","src","color","href","rel","target","icon","size","Component","About","Projects","Resume","Contact","Main","exact","path","library","add","fab","fas","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOA0CeA,E,iLArCP,OACI,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChC,kBAAC,OAAD,CAAMC,UAAU,gBACZ,kBAAC,OAAD,CAAMC,IAAK,IACP,yBAAKD,UAAU,aAAaE,IAA8B,kBAC1D,yBAAKF,UAAU,eACX,6CACA,wBAAIH,MAAO,CAACM,MAAO,UAAnB,6BACA,6BACA,+FAGA,yBAAKH,UAAU,gBAEX,uBAAGI,KAAK,wCAAwCC,IAAI,sBAAsBC,OAAO,UAC7E,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,YAAcC,KAAK,KAAKL,MAAM,aAIjE,uBAAGC,KAAK,6BAA6BC,IAAI,sBAAsBC,OAAO,UAClE,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,iBAAmBC,KAAK,KAAKL,MAAM,aAItE,uBAAGC,KAAK,qBAAqBC,IAAI,sBAAsBC,OAAO,UAC1D,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,mBAAqBC,KAAK,KAAKL,MAAM,sB,GA3B9EM,aCOXC,E,iLANP,OACI,yC,GAHQD,aCQLE,E,iLANP,OACI,iD,GAHWF,aCQRG,E,iLANP,OACI,+C,GAHSH,aCQNI,E,iLANP,OACI,2C,GAHUJ,a,QC4BPK,EAtBF,WACT,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,aACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,WACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,S,wCChBhBC,IAAQC,IAAIC,IAAKC,K,IAoCFC,E,iLAhCX,OACE,yBAAKrB,UAAU,oBACb,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAesB,MAAM,YAAYC,QAAM,GACrD,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAGR,kBAAC,SAAD,CAAQF,MAAM,QACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAME,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAGR,kBAAC,UAAD,KACI,yBAAKxB,UAAU,gBACb,kBAAC,EAAD,c,GAzBAS,aCEEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.39d0f7e5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Grid, Cell} from 'react-mdl';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nclass LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Grid className=\"landing-grid\">\r\n                    <Cell col={12}>\r\n                        <img className=\"avatar-img\" src={process.env.PUBLIC_URL + \"/myAvatar.svg\"}/>\r\n                        <div className=\"banner-text\">\r\n                            <h1>Adil Rasiyani</h1>\r\n                            <h2 style={{color: \"white\"}}>Texas A&M University 2023</h2>\r\n                            <hr/>\r\n                            <p>\r\n                                Java | C++ | Python | Selenium | React | Competitive Programming\r\n                            </p>\r\n                            <div className=\"social-links\">\r\n                                {/* LinkedIn profile*/}\r\n                                <a href=\"https://linkedin.com/in/adil-rasiyani\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                    <FontAwesomeIcon icon={['fab', 'linkedin'] } size=\"5x\" color=\"#efefef\"/>\r\n                                </a>\r\n\r\n                                {/* GitHub profile*/}\r\n                                <a href=\"https://github.com/AdilRas\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square'] } size=\"5x\" color=\"#efefef\"/>\r\n                                </a>\r\n\r\n                                {/* LinkedIn profile*/}\r\n                                <a href=\"https://google.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                    <FontAwesomeIcon icon={['fab', 'facebook-square'] } size=\"5x\" color=\"#efefef\"/>\r\n                                </a>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, {Component} from 'react';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <h1>About</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\r\n\r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Projects Page</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects;","import React, {Component} from 'react';\r\n\r\nclass Resume extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Resume Page</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resume;\r\n","import React, {Component} from 'react';\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Contact</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport LandingPage from './LandingPage';\r\nimport About from './About';\r\nimport Projects from './Projects';\r\nimport Resume from './Resume';\r\nimport Contact from './Contact';\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\nconst Main = () => {\r\n    return ( \r\n        <Switch> \r\n            <Route exact path=\"/\">\r\n                <LandingPage/>\r\n            </Route>\r\n            <Route path=\"/about\">\r\n                <About/>\r\n            </Route>\r\n            <Route path=\"/projects\">\r\n                <Projects/>\r\n            </Route>\r\n            <Route path=\"/resume\">\r\n                <Resume/>\r\n            </Route>\r\n            <Route path=\"/contact\">\r\n                <Contact/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Main;","import React, {Component} from 'react';\nimport {Drawer, Navigation, Header, Layout, Textfield, Content} from 'react-mdl';\nimport Main from './components/Main';\nimport {Link} from 'react-router-dom';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(fab, fas);\n\nclass App extends Component {\n  render() {    \n    return (\n      <div className=\"demo-big-content\">\n        <Layout>\n            <Header className=\"header-color\" title=\"Portfolio\" scroll>\n                <Navigation>\n                    <Link to=\"/\">Home</Link>\n                    <Link to=\"/resume\">Resume</Link>\n                    <Link to=\"/contact\">Contact</Link>\n                    <Link to=\"/projects\">Projects</Link>\n                    <Link to=\"/about\">About</Link>\n                </Navigation>\n            </Header>\n            <Drawer title=\"Menu\">\n                <Navigation>\n                    <Link to=\"/\">Home</Link>\n                    <Link to=\"/resume\">Resume</Link>\n                    <Link to=\"/contact\">Contact</Link>\n                    <Link to=\"/projects\">Projects</Link>\n                    <Link to=\"/about\">About</Link>\n                </Navigation>\n            </Drawer>\n            <Content>\n                <div className=\"page-content\">\n                  <Main/>\n                </div>\n            </Content>\n        </Layout>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}